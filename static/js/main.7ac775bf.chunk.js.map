{"version":3,"sources":["assets/bg.jpg","assets/erd.mwb","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ExpansionPanelEnum","StyledContainer","styled","display","height","alignItems","justifyContent","backgroundImage","bgImage","backgroundSize","Wrapper","width","flexDirection","StyledPaper","Paper","marginBottom","PageTitle","Typography","margin","StyledExpansionPanelDetails","ExpansionPanelDetails","Paragraph","TextWithIndent","textIndent","App","useState","expanded","setExpanded","handleChange","panel","elevation","variant","ExpansionPanel","Overview","onChange","ExpansionPanelSummary","expandIcon","ExpandMore","href","target","rel","TechnicalRequirement","Journal","Additional","erdFile","download","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ac775bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.dd303e52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/erd.e0b0ca3d.mwb\";","import React, { useState } from 'react';\r\nimport {ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Paper, Typography, styled } from '@material-ui/core';\r\nimport { ExpandMore } from '@material-ui/icons';\r\n\r\nimport bgImage from './assets/bg.jpg'\r\nimport erdFile from './assets/erd.mwb';\r\n\r\nenum ExpansionPanelEnum {\r\n  Overview = 'Overview',\r\n  TechnicalRequirement = 'TechnicalRequirement',\r\n  Journal = 'Journal',\r\n  Additional = 'Additional',\r\n}\r\n\r\nconst App = () => {\r\n  const [expanded, setExpanded] = useState('');\r\n\r\n  const handleChange = (panel: string) => setExpanded(panel !== expanded ? panel : '' );\r\n  \r\n  return (\r\n    <StyledContainer>\r\n      \r\n      <Wrapper>\r\n        <StyledPaper elevation={3}>\r\n          <PageTitle variant=\"h3\">Module: Grade journal</PageTitle>\r\n          <PageTitle variant=\"h4\">Group: 6</PageTitle>\r\n        </StyledPaper>\r\n        <ExpansionPanel expanded={expanded === ExpansionPanelEnum.Overview} onChange={() => handleChange(ExpansionPanelEnum.Overview)}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMore />}>\r\n            <Typography variant=\"h6\">Overview</Typography>\r\n          </ExpansionPanelSummary>\r\n          <StyledExpansionPanelDetails>\r\n          <p><b>Team leader:</b>Bondarenko Vadim</p>\r\n            <b>Participants:</b>\r\n            <TextWithIndent>> Bondarenko Vadim</TextWithIndent>\r\n            <TextWithIndent>> Kikhniei Danyil</TextWithIndent>\r\n            <Paragraph><b>Task manager:</b> <a href=\"https://trello.com/b/myYAJjiQ/grade-project\" target=\"_blank\" rel=\"noopener noreferrer\">Trello</a></Paragraph>\r\n            <Paragraph><b>Project terms:</b> <i>04.04.20 - 25.05.20</i></Paragraph>\r\n          </StyledExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        <ExpansionPanel expanded={expanded === ExpansionPanelEnum.TechnicalRequirement} onChange={() => handleChange(ExpansionPanelEnum.TechnicalRequirement)}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMore />}>\r\n            <Typography variant=\"h6\">Technical Requirement</Typography>\r\n          </ExpansionPanelSummary>\r\n          <StyledExpansionPanelDetails>\r\n            <Paragraph>\r\n              <b>Link with file: </b>\r\n              <a href=\"https://docs.google.com/document/d/1naWBdEDxwGP0klN37xVbURi7DCDHTff_5wSZ_U6lpLU/edit?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">Technical Requirement</a>\r\n            </Paragraph>\r\n          </StyledExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        <ExpansionPanel expanded={expanded === ExpansionPanelEnum.Journal} onChange={() => handleChange(ExpansionPanelEnum.Journal)}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMore />}>\r\n            <Typography variant=\"h6\">Journal</Typography>\r\n          </ExpansionPanelSummary>\r\n          <StyledExpansionPanelDetails>\r\n            <p><b>Link with file: </b><a href=\"https://docs.google.com/spreadsheets/d/1x6ZvnlZJgqdzx6J-GxXfw4dHkzN_ElqeP9r3kB1gxes/edit?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">Journal</a></p>\r\n            <Paragraph><b>Time logs:</b></Paragraph>\r\n            <TextWithIndent>> <a href=\"https://drive.google.com/open?id=1MPOPYk5zhMuqNArLTZ4wtdYgU6WmVp2_7HHCBBaPuJo\" target=\"_blank\" rel=\"noopener noreferrer\">Bondarenko</a></TextWithIndent>\r\n            <TextWithIndent>> <a href=\"https://drive.google.com/open?id=1OilDZAEvm3yS4HNb09mh_wLh_UxgaeiyRUSaZqALPls\" target=\"_blank\" rel=\"noopener noreferrer\">Kikhniei</a></TextWithIndent>\r\n          </StyledExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        <ExpansionPanel expanded={expanded === ExpansionPanelEnum.Additional} onChange={() => handleChange(ExpansionPanelEnum.Additional)}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMore />}>\r\n            <Typography variant=\"h6\">Additional</Typography>\r\n          </ExpansionPanelSummary>\r\n          <StyledExpansionPanelDetails>\r\n            <Paragraph><b>Link with design:</b> <a href=\"https://j935q.draftium.site\" target=\"_blank\" rel=\"noopener noreferrer\">Design</a></Paragraph>\r\n            <Paragraph><b>ERD:</b> <a href={erdFile} download>MWB file</a></Paragraph>\r\n          </StyledExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      </Wrapper>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\n\r\nconst StyledContainer = styled('div')({\r\n  display: 'flex',\r\n  height: '100vh',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  backgroundImage: `url(${bgImage})`,\r\n  backgroundSize: 'cover',\r\n});\r\n\r\nconst Wrapper = styled('div')({\r\n  width: '70%',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n})\r\n\r\nconst StyledPaper = styled(Paper)({\r\n  marginBottom: '25px'\r\n})\r\n\r\nconst PageTitle = styled(Typography)({\r\n  margin: '15px',\r\n})\r\n\r\nconst StyledExpansionPanelDetails = styled(ExpansionPanelDetails)({\r\n  flexDirection: 'column'\r\n})\r\n\r\nconst Paragraph = styled('p')({\r\n  margin: '10px 0',\r\n})\r\n\r\nconst TextWithIndent = styled('p')({\r\n  margin: '10px 0',\r\n  textIndent: '25px',\r\n})\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './app.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}